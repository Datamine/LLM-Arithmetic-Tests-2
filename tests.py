from test import generate_test_string


def run_tests():
    """
    Garbage test cases generated by GPT 4-o
    """

    try:
        # Test Case 1: Simple case with no carries
        a = "123"
        b = "456"
        completion = "579"
        assert generate_test_string(a, b, completion) == "111", f"Test 1 failed: {generate_test_string(a, b, completion)}"

        # Test Case 2: A case where some sums are too large
        a = "567"
        b = "221"
        completion = "788"
        assert generate_test_string(a, b, completion) == "111", f"Test 2 failed: {generate_test_string(a, b, completion)}"

        # Test Case 4: Mixed case with some valid and some invalid additions
        a = "481"
        b = "517"
        completion = "999"
        assert generate_test_string(a, b, completion) == "110", f"Test 4 failed: {generate_test_string(a, b, completion)}"

        # Test Case 5: All zeros should return all ones
        a = "000"
        b = "000"
        completion = "000"
        assert generate_test_string(a, b, completion) == "111", f"Test 5 failed: {generate_test_string(a, b, completion)}"

        # Test Case 6: One invalid digit (sum greater than 9)
        a = "1234"
        b = "4321"
        completion = "5555"
        assert generate_test_string(a, b, completion) == "1111", f"Test 6 failed: {generate_test_string(a, b, completion)}"

        # Test Case 7: Edge case with single digit addition
        a = "5"
        b = "3"
        completion = "8"
        assert generate_test_string(a, b, completion) == "1", f"Test 7 failed: {generate_test_string(a, b, completion)}"

        # Test Case 8: Edge case with invalid single digit addition
        a = "7"
        b = "6"
        completion = "3"
        assert generate_test_string(a, b, completion) == "0", f"Test 8 failed: {generate_test_string(a, b, completion)}"

        # Test Case 9: All additions match, with no need for carry
        a = "222"
        b = "333"
        completion = "555"
        assert generate_test_string(a, b, completion) == "111", f"Test 9 failed: {generate_test_string(a, b, completion)}"

        # Test Case 10: Leading zeros, which should still be valid additions
        a = "00123"
        b = "00456"
        completion = "00579"
        assert generate_test_string(a, b, completion) == "11111", f"Test 10 failed: {generate_test_string(a, b, completion)}"

        # Test Case 11: Different lengths with trailing zeros (edge case for malformed input)
        a = "100"
        b = "200"
        completion = "300"
        assert generate_test_string(a, b, completion) == "111", f"Test 11 failed: {generate_test_string(a, b, completion)}"

        print("All tests passed!")

    except AssertionError as e:
        print(e)


# Run the tests
run_tests()